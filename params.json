{"name":"Javascript-object-inheritance","tagline":"Proposed pattern for object design and inheritance using ES5 javascript","body":"# Andy's Object Inheritance Pattern for JavaScript\r\nEver since I began coding javascript, I have had a difficult time achieving clean object inheritance.  My requirements:\r\n* inherited initialization functions with arguments\r\n* `prototype` and `constructor` properties pointed to their proper places\r\n* easy control over the prototype chain\r\n* control over the enumerability of prototype properties\r\n\r\nMy current pattern fulfills these requirements to my satisfaction:\r\n## Definition\r\n\r\n```javascript\r\nfunction Parent(options) {\r\n  this.parentConstructorProperty = options.parentConstructorProperty;\r\n}\r\nParent.prototype = Object.create(null, {\r\n  constructor: {\r\n    value: Parent\r\n  },\r\n  parentPrototypeProperty: {\r\n    value: 'parent prototype value'\r\n  }\r\n});\r\n\r\nfunction Child(options) {\r\n  Parent.apply(this, arguments);\r\n  this.childConstructorProperty = options.childConstructorProperty;\r\n}\r\nChild.prototype = Object.create(Parent.prototype, {\r\n  constructor: {\r\n    value: Child\r\n  },\r\n  childPrototypeProperty: {\r\n    value: 'child prototype value'\r\n  }\r\n});\r\n```\r\n## Instantiation\r\n\r\n```javascript\r\nvar child = new Child({\r\n  parentConstructorProperty: 'parent constructor value',\r\n  childConstructorProperty: 'child constructor value'\r\n});\r\n```\r\n## Testing\r\n\r\n```javascript\r\nchild.parentConstructorProperty\r\n//> 'parent constructor value'\r\nchild.childConstructorProperty\r\n//> 'child constructor value'\r\nchild.parentPrototypeProperty\r\n//> 'parent prototype value'\r\nchild.childPrototypeProperty\r\n//> 'child prototype value'\r\nchild.constructor\r\n//> [Function: Child]\r\nObject.getPrototypeOf(child.constructor.prototype).constructor\r\n//> [Function: Parent]\r\n```\r\n\r\n## Notable Features\r\n* this pattern separates constructor and prototype definition\r\n* you can choose where or whether to run parent constructor functions by using `Function.prototype.apply`\r\n* arguments to constructor functions should be named and contained in `options` objects\r\n* prototypical inheritance is not achieved by instantiating parent constructors\r\n  * prototype objects' prototypes are set up using `Object.create` to point directly to the parent constructor's prototype\r\n  * prototype defintitions get good results, but need to be described with a verbose properties descriptor object\r\n(due to the way `Object.create` is implemented)\r\n  * `writable`, `enumerable`, and `configurable` will default to `false` when defining a property within\r\na prototype's properties defifition object\r\n* using `Object.create` to build prototype objects breaks the standard implementation of `Object.prototype.constructor`,\r\nso it is necessary to patch up the `constructor` property of each prototype object manually\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}